-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Interface.RegistryPackageOwner exposing (..)

import Github.Enum.RegistryPackageType
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onOrganization : SelectionSet decodesTo Github.Object.Organization
    , onUser : SelectionSet decodesTo Github.Object.User
    , onRepository : SelectionSet decodesTo Github.Object.Repository
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Github.Interface.RegistryPackageOwner
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "Organization" selections.onOrganization
        , Object.buildFragment "User" selections.onUser
        , Object.buildFragment "Repository" selections.onRepository
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onRepository = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| -}
id : SelectionSet Github.ScalarCodecs.Id Github.Interface.RegistryPackageOwner
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias RegistryPackagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , name : OptionalArgument String
    , names : OptionalArgument (List (Maybe String))
    , packageType : OptionalArgument Github.Enum.RegistryPackageType.RegistryPackageType
    , publicOnly : OptionalArgument Bool
    , registryPackageType : OptionalArgument String
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| A list of registry packages under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - name - Find registry package by name.
  - names - Find registry packages by their names.
  - packageType - Filter registry package by type.
  - publicOnly - Filter registry package by whether it is publicly visible
  - registryPackageType - Filter registry package by type (string).
  - repositoryId - Find registry packages in a repository.

-}
registryPackages : (RegistryPackagesOptionalArguments -> RegistryPackagesOptionalArguments) -> SelectionSet decodesTo Github.Object.RegistryPackageConnection -> SelectionSet decodesTo Github.Interface.RegistryPackageOwner
registryPackages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, name = Absent, names = Absent, packageType = Absent, publicOnly = Absent, registryPackageType = Absent, repositoryId = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "names" filledInOptionals.names (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "packageType" filledInOptionals.packageType (Encode.enum Github.Enum.RegistryPackageType.toString), Argument.optional "publicOnly" filledInOptionals.publicOnly Encode.bool, Argument.optional "registryPackageType" filledInOptionals.registryPackageType Encode.string, Argument.optional "repositoryId" filledInOptionals.repositoryId (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "registryPackages" optionalArgs object_ identity
