-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.ReportedContentClassifiers exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The reasons a piece of content can be reported or minimized.

  - Abuse - An abusive or harassing piece of content
  - OffTopic - An irrelevant piece of content
  - Outdated - An outdated piece of content
  - Resolved - The content has been resolved
  - Spam - A spammy piece of content

-}
type ReportedContentClassifiers
    = Abuse
    | OffTopic
    | Outdated
    | Resolved
    | Spam


list : List ReportedContentClassifiers
list =
    [ Abuse, OffTopic, Outdated, Resolved, Spam ]


decoder : Decoder ReportedContentClassifiers
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ABUSE" ->
                        Decode.succeed Abuse

                    "OFF_TOPIC" ->
                        Decode.succeed OffTopic

                    "OUTDATED" ->
                        Decode.succeed Outdated

                    "RESOLVED" ->
                        Decode.succeed Resolved

                    "SPAM" ->
                        Decode.succeed Spam

                    _ ->
                        Decode.fail ("Invalid ReportedContentClassifiers type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ReportedContentClassifiers -> String
toString enum =
    case enum of
        Abuse ->
            "ABUSE"

        OffTopic ->
            "OFF_TOPIC"

        Outdated ->
            "OUTDATED"

        Resolved ->
            "RESOLVED"

        Spam ->
            "SPAM"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ReportedContentClassifiers
fromString enumString =
    case enumString of
        "ABUSE" ->
            Just Abuse

        "OFF_TOPIC" ->
            Just OffTopic

        "OUTDATED" ->
            Just Outdated

        "RESOLVED" ->
            Just Resolved

        "SPAM" ->
            Just Spam

        _ ->
            Nothing
