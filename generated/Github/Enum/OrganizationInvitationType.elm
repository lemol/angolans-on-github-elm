-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.OrganizationInvitationType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible organization invitation types.

  - Email - The invitation was to an email address.
  - User - The invitation was to an existing user.

-}
type OrganizationInvitationType
    = Email
    | User


list : List OrganizationInvitationType
list =
    [ Email, User ]


decoder : Decoder OrganizationInvitationType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "EMAIL" ->
                        Decode.succeed Email

                    "USER" ->
                        Decode.succeed User

                    _ ->
                        Decode.fail ("Invalid OrganizationInvitationType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : OrganizationInvitationType -> String
toString enum =
    case enum of
        Email ->
            "EMAIL"

        User ->
            "USER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OrganizationInvitationType
fromString enumString =
    case enumString of
        "EMAIL" ->
            Just Email

        "USER" ->
            Just User

        _ ->
            Nothing
