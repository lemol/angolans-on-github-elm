-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.PinnableItemType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Represents items that can be pinned to a profile page or dashboard.

  - Gist - A gist.
  - Issue - An issue.
  - Organization - An organization.
  - Project - A project.
  - PullRequest - A pull request.
  - Repository - A repository.
  - Team - A team.
  - User - A user.

-}
type PinnableItemType
    = Gist
    | Issue
    | Organization
    | Project
    | PullRequest
    | Repository
    | Team
    | User


list : List PinnableItemType
list =
    [ Gist, Issue, Organization, Project, PullRequest, Repository, Team, User ]


decoder : Decoder PinnableItemType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "GIST" ->
                        Decode.succeed Gist

                    "ISSUE" ->
                        Decode.succeed Issue

                    "ORGANIZATION" ->
                        Decode.succeed Organization

                    "PROJECT" ->
                        Decode.succeed Project

                    "PULL_REQUEST" ->
                        Decode.succeed PullRequest

                    "REPOSITORY" ->
                        Decode.succeed Repository

                    "TEAM" ->
                        Decode.succeed Team

                    "USER" ->
                        Decode.succeed User

                    _ ->
                        Decode.fail ("Invalid PinnableItemType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : PinnableItemType -> String
toString enum =
    case enum of
        Gist ->
            "GIST"

        Issue ->
            "ISSUE"

        Organization ->
            "ORGANIZATION"

        Project ->
            "PROJECT"

        PullRequest ->
            "PULL_REQUEST"

        Repository ->
            "REPOSITORY"

        Team ->
            "TEAM"

        User ->
            "USER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PinnableItemType
fromString enumString =
    case enumString of
        "GIST" ->
            Just Gist

        "ISSUE" ->
            Just Issue

        "ORGANIZATION" ->
            Just Organization

        "PROJECT" ->
            Just Project

        "PULL_REQUEST" ->
            Just PullRequest

        "REPOSITORY" ->
            Just Repository

        "TEAM" ->
            Just Team

        "USER" ->
            Just User

        _ ->
            Nothing
