-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.RegistryPackageType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible types of a registry package.

  - Debian - A debian package.
  - Docker - A docker image.
  - Maven - A maven registry package.
  - Npm - An npm registry package.
  - Nuget - A nuget package.
  - Python - A python package.
  - Rubygems - A rubygems registry package.

-}
type RegistryPackageType
    = Debian
    | Docker
    | Maven
    | Npm
    | Nuget
    | Python
    | Rubygems


list : List RegistryPackageType
list =
    [ Debian, Docker, Maven, Npm, Nuget, Python, Rubygems ]


decoder : Decoder RegistryPackageType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DEBIAN" ->
                        Decode.succeed Debian

                    "DOCKER" ->
                        Decode.succeed Docker

                    "MAVEN" ->
                        Decode.succeed Maven

                    "NPM" ->
                        Decode.succeed Npm

                    "NUGET" ->
                        Decode.succeed Nuget

                    "PYTHON" ->
                        Decode.succeed Python

                    "RUBYGEMS" ->
                        Decode.succeed Rubygems

                    _ ->
                        Decode.fail ("Invalid RegistryPackageType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : RegistryPackageType -> String
toString enum =
    case enum of
        Debian ->
            "DEBIAN"

        Docker ->
            "DOCKER"

        Maven ->
            "MAVEN"

        Npm ->
            "NPM"

        Nuget ->
            "NUGET"

        Python ->
            "PYTHON"

        Rubygems ->
            "RUBYGEMS"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RegistryPackageType
fromString enumString =
    case enumString of
        "DEBIAN" ->
            Just Debian

        "DOCKER" ->
            Just Docker

        "MAVEN" ->
            Just Maven

        "NPM" ->
            Just Npm

        "NUGET" ->
            Just Nuget

        "PYTHON" ->
            Just Python

        "RUBYGEMS" ->
            Just Rubygems

        _ ->
            Nothing
