-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.RepositoryContributionType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The reason a repository is listed as 'contributed'.

  - Commit - Created a commit
  - Issue - Created an issue
  - PullRequest - Created a pull request
  - PullRequestReview - Reviewed a pull request
  - Repository - Created the repository

-}
type RepositoryContributionType
    = Commit
    | Issue
    | PullRequest
    | PullRequestReview
    | Repository


list : List RepositoryContributionType
list =
    [ Commit, Issue, PullRequest, PullRequestReview, Repository ]


decoder : Decoder RepositoryContributionType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "COMMIT" ->
                        Decode.succeed Commit

                    "ISSUE" ->
                        Decode.succeed Issue

                    "PULL_REQUEST" ->
                        Decode.succeed PullRequest

                    "PULL_REQUEST_REVIEW" ->
                        Decode.succeed PullRequestReview

                    "REPOSITORY" ->
                        Decode.succeed Repository

                    _ ->
                        Decode.fail ("Invalid RepositoryContributionType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : RepositoryContributionType -> String
toString enum =
    case enum of
        Commit ->
            "COMMIT"

        Issue ->
            "ISSUE"

        PullRequest ->
            "PULL_REQUEST"

        PullRequestReview ->
            "PULL_REQUEST_REVIEW"

        Repository ->
            "REPOSITORY"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RepositoryContributionType
fromString enumString =
    case enumString of
        "COMMIT" ->
            Just Commit

        "ISSUE" ->
            Just Issue

        "PULL_REQUEST" ->
            Just PullRequest

        "PULL_REQUEST_REVIEW" ->
            Just PullRequestReview

        "REPOSITORY" ->
            Just Repository

        _ ->
            Nothing
