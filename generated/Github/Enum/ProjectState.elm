-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.ProjectState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| State of the project; either 'open' or 'closed'

  - Closed - The project is closed.
  - Open - The project is open.

-}
type ProjectState
    = Closed
    | Open


list : List ProjectState
list =
    [ Closed, Open ]


decoder : Decoder ProjectState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CLOSED" ->
                        Decode.succeed Closed

                    "OPEN" ->
                        Decode.succeed Open

                    _ ->
                        Decode.fail ("Invalid ProjectState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ProjectState -> String
toString enum =
    case enum of
        Closed ->
            "CLOSED"

        Open ->
            "OPEN"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProjectState
fromString enumString =
    case enumString of
        "CLOSED" ->
            Just Closed

        "OPEN" ->
            Just Open

        _ ->
            Nothing
