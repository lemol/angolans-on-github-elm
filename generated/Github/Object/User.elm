-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.User exposing (..)

import Github.Enum.GistPrivacy
import Github.Enum.IssueState
import Github.Enum.PinnableItemType
import Github.Enum.ProjectState
import Github.Enum.PullRequestState
import Github.Enum.RegistryPackageType
import Github.Enum.RepositoryAffiliation
import Github.Enum.RepositoryContributionType
import Github.Enum.RepositoryPrivacy
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AnyPinnableItemsOptionalArguments =
    { type_ : OptionalArgument Github.Enum.PinnableItemType.PinnableItemType }


{-| Determine if this repository owner has any items that can be pinned to their profile.

  - type\_ - Filter to only a particular kind of pinnable item.

-}
anyPinnableItems : (AnyPinnableItemsOptionalArguments -> AnyPinnableItemsOptionalArguments) -> SelectionSet Bool Github.Object.User
anyPinnableItems fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { type_ = Absent }

        optionalArgs =
            [ Argument.optional "type" filledInOptionals.type_ (Encode.enum Github.Enum.PinnableItemType.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForField "Bool" "anyPinnableItems" optionalArgs Decode.bool


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the user's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet Github.ScalarCodecs.Uri Github.Object.User
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The user's public profile bio.
-}
bio : SelectionSet (Maybe String) Github.Object.User
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)


{-| The user's public profile bio as HTML.
-}
bioHTML : SelectionSet Github.ScalarCodecs.Html Github.Object.User
bioHTML =
    Object.selectionForField "ScalarCodecs.Html" "bioHTML" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


type alias CommitCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of commit comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
commitComments : (CommitCommentsOptionalArguments -> CommitCommentsOptionalArguments) -> SelectionSet decodesTo Github.Object.CommitCommentConnection -> SelectionSet decodesTo Github.Object.User
commitComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "commitComments" optionalArgs object_ identity


{-| The user's public profile company.
-}
company : SelectionSet (Maybe String) Github.Object.User
company =
    Object.selectionForField "(Maybe String)" "company" [] (Decode.string |> Decode.nullable)


{-| The user's public profile company as HTML.
-}
companyHTML : SelectionSet Github.ScalarCodecs.Html Github.Object.User
companyHTML =
    Object.selectionForField "ScalarCodecs.Html" "companyHTML" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


type alias ContributionsCollectionOptionalArguments =
    { from : OptionalArgument Github.ScalarCodecs.DateTime
    , organizationID : OptionalArgument Github.ScalarCodecs.Id
    , to : OptionalArgument Github.ScalarCodecs.DateTime
    }


{-| The collection of contributions this user has made to different repositories.

  - from - Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
  - organizationID - The ID of the organization used to filter contributions.
  - to - Only contributions made before and up to and including this time will be
    counted. If omitted, defaults to the current time.

-}
contributionsCollection : (ContributionsCollectionOptionalArguments -> ContributionsCollectionOptionalArguments) -> SelectionSet decodesTo Github.Object.ContributionsCollection -> SelectionSet decodesTo Github.Object.User
contributionsCollection fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { from = Absent, organizationID = Absent, to = Absent }

        optionalArgs =
            [ Argument.optional "from" filledInOptionals.from (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime), Argument.optional "organizationID" filledInOptionals.organizationID (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId), Argument.optional "to" filledInOptionals.to (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "contributionsCollection" optionalArgs object_ identity


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.User
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Github.Object.User
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The user's publicly visible profile email.
-}
email : SelectionSet String Github.Object.User
email =
    Object.selectionForField "String" "email" [] Decode.string


type alias FollowersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users the given user is followed by.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
followers : (FollowersOptionalArguments -> FollowersOptionalArguments) -> SelectionSet decodesTo Github.Object.FollowerConnection -> SelectionSet decodesTo Github.Object.User
followers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "followers" optionalArgs object_ identity


type alias FollowingOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users the given user is following.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
following : (FollowingOptionalArguments -> FollowingOptionalArguments) -> SelectionSet decodesTo Github.Object.FollowingConnection -> SelectionSet decodesTo Github.Object.User
following fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "following" optionalArgs object_ identity


type alias GistRequiredArguments =
    { name : String }


{-| Find gist by repo name.

  - name - The gist name to find.

-}
gist : GistRequiredArguments -> SelectionSet decodesTo Github.Object.Gist -> SelectionSet (Maybe decodesTo) Github.Object.User
gist requiredArgs object_ =
    Object.selectionForCompositeField "gist" [ Argument.required "name" requiredArgs.name Encode.string ] object_ (identity >> Decode.nullable)


type alias GistCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of gist comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
gistComments : (GistCommentsOptionalArguments -> GistCommentsOptionalArguments) -> SelectionSet decodesTo Github.Object.GistCommentConnection -> SelectionSet decodesTo Github.Object.User
gistComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "gistComments" optionalArgs object_ identity


type alias GistsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.GistOrder
    , privacy : OptionalArgument Github.Enum.GistPrivacy.GistPrivacy
    }


{-| A list of the Gists the user has created.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for gists returned from the connection
  - privacy - Filters Gists according to privacy.

-}
gists : (GistsOptionalArguments -> GistsOptionalArguments) -> SelectionSet decodesTo Github.Object.GistConnection -> SelectionSet decodesTo Github.Object.User
gists fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent, privacy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeGistOrder, Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Github.Enum.GistPrivacy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "gists" optionalArgs object_ identity


type alias HovercardOptionalArguments =
    { primarySubjectId : OptionalArgument Github.ScalarCodecs.Id }


{-| The hovercard information for this user in a given context

  - primarySubjectId - The ID of the subject to get the hovercard in the context of

-}
hovercard : (HovercardOptionalArguments -> HovercardOptionalArguments) -> SelectionSet decodesTo Github.Object.Hovercard -> SelectionSet decodesTo Github.Object.User
hovercard fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { primarySubjectId = Absent }

        optionalArgs =
            [ Argument.optional "primarySubjectId" filledInOptionals.primarySubjectId (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "hovercard" optionalArgs object_ identity


{-| -}
id : SelectionSet Github.ScalarCodecs.Id Github.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether or not this user is a participant in the GitHub Security Bug Bounty.
-}
isBountyHunter : SelectionSet Bool Github.Object.User
isBountyHunter =
    Object.selectionForField "Bool" "isBountyHunter" [] Decode.bool


{-| Whether or not this user is a participant in the GitHub Campus Experts Program.
-}
isCampusExpert : SelectionSet Bool Github.Object.User
isCampusExpert =
    Object.selectionForField "Bool" "isCampusExpert" [] Decode.bool


{-| Whether or not this user is a GitHub Developer Program member.
-}
isDeveloperProgramMember : SelectionSet Bool Github.Object.User
isDeveloperProgramMember =
    Object.selectionForField "Bool" "isDeveloperProgramMember" [] Decode.bool


{-| Whether or not this user is a GitHub employee.
-}
isEmployee : SelectionSet Bool Github.Object.User
isEmployee =
    Object.selectionForField "Bool" "isEmployee" [] Decode.bool


{-| Whether or not the user has marked themselves as for hire.
-}
isHireable : SelectionSet Bool Github.Object.User
isHireable =
    Object.selectionForField "Bool" "isHireable" [] Decode.bool


{-| Whether or not this user is a site administrator.
-}
isSiteAdmin : SelectionSet Bool Github.Object.User
isSiteAdmin =
    Object.selectionForField "Bool" "isSiteAdmin" [] Decode.bool


{-| Whether or not this user is the viewing user.
-}
isViewer : SelectionSet Bool Github.Object.User
isViewer =
    Object.selectionForField "Bool" "isViewer" [] Decode.bool


type alias IssueCommentsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of issue comments made by this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
issueComments : (IssueCommentsOptionalArguments -> IssueCommentsOptionalArguments) -> SelectionSet decodesTo Github.Object.IssueCommentConnection -> SelectionSet decodesTo Github.Object.User
issueComments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "issueComments" optionalArgs object_ identity


type alias IssuesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , filterBy : OptionalArgument Github.InputObject.IssueFilters
    , first : OptionalArgument Int
    , labels : OptionalArgument (List String)
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.IssueOrder
    , states : OptionalArgument (List Github.Enum.IssueState.IssueState)
    }


{-| A list of issues associated with this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - filterBy - Filtering options for issues returned from the connection.
  - first - Returns the first _n_ elements from the list.
  - labels - A list of label names to filter the pull requests by.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for issues returned from the connection.
  - states - A list of states to filter the issues by.

-}
issues : (IssuesOptionalArguments -> IssuesOptionalArguments) -> SelectionSet decodesTo Github.Object.IssueConnection -> SelectionSet decodesTo Github.Object.User
issues fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, filterBy = Absent, first = Absent, labels = Absent, last = Absent, orderBy = Absent, states = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "filterBy" filledInOptionals.filterBy Github.InputObject.encodeIssueFilters, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeIssueOrder, Argument.optional "states" filledInOptionals.states (Encode.enum Github.Enum.IssueState.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "issues" optionalArgs object_ identity


{-| Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity.
-}
itemShowcase : SelectionSet decodesTo Github.Object.ProfileItemShowcase -> SelectionSet decodesTo Github.Object.User
itemShowcase object_ =
    Object.selectionForCompositeField "itemShowcase" [] object_ identity


{-| The user's public profile location.
-}
location : SelectionSet (Maybe String) Github.Object.User
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


{-| The username used to login.
-}
login : SelectionSet String Github.Object.User
login =
    Object.selectionForField "String" "login" [] Decode.string


{-| The user's public profile name.
-}
name : SelectionSet (Maybe String) Github.Object.User
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


type alias OrganizationRequiredArguments =
    { login : String }


{-| Find an organization by its login that the user belongs to.

  - login - The login of the organization to find.

-}
organization : OrganizationRequiredArguments -> SelectionSet decodesTo Github.Object.Organization -> SelectionSet (Maybe decodesTo) Github.Object.User
organization requiredArgs object_ =
    Object.selectionForCompositeField "organization" [ Argument.required "login" requiredArgs.login Encode.string ] object_ (identity >> Decode.nullable)


type alias OrganizationsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of organizations the user belongs to.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
organizations : (OrganizationsOptionalArguments -> OrganizationsOptionalArguments) -> SelectionSet decodesTo Github.Object.OrganizationConnection -> SelectionSet decodesTo Github.Object.User
organizations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "organizations" optionalArgs object_ identity


type alias PinnableItemsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , types : OptionalArgument (List Github.Enum.PinnableItemType.PinnableItemType)
    }


{-| A list of repositories and gists this profile owner can pin to their profile.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - types - Filter the types of pinnable items that are returned.

-}
pinnableItems : (PinnableItemsOptionalArguments -> PinnableItemsOptionalArguments) -> SelectionSet decodesTo Github.Object.PinnableItemConnection -> SelectionSet decodesTo Github.Object.User
pinnableItems fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, types = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "types" filledInOptionals.types (Encode.enum Github.Enum.PinnableItemType.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pinnableItems" optionalArgs object_ identity


type alias PinnedItemsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , types : OptionalArgument (List Github.Enum.PinnableItemType.PinnableItemType)
    }


{-| A list of repositories and gists this profile owner has pinned to their profile

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - types - Filter the types of pinned items that are returned.

-}
pinnedItems : (PinnedItemsOptionalArguments -> PinnedItemsOptionalArguments) -> SelectionSet decodesTo Github.Object.PinnableItemConnection -> SelectionSet decodesTo Github.Object.User
pinnedItems fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, types = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "types" filledInOptionals.types (Encode.enum Github.Enum.PinnableItemType.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pinnedItems" optionalArgs object_ identity


{-| Returns how many more items this profile owner can pin to their profile.
-}
pinnedItemsRemaining : SelectionSet Int Github.Object.User
pinnedItemsRemaining =
    Object.selectionForField "Int" "pinnedItemsRemaining" [] Decode.int


type alias PinnedRepositoriesOptionalArguments =
    { affiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , isLocked : OptionalArgument Bool
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.RepositoryOrder
    , ownerAffiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , privacy : OptionalArgument Github.Enum.RepositoryPrivacy.RepositoryPrivacy
    }


{-| A list of repositories this user has pinned to their profile

  - affiliations - Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - privacy - If non-null, filters repositories according to privacy

-}
pinnedRepositories : (PinnedRepositoriesOptionalArguments -> PinnedRepositoriesOptionalArguments) -> SelectionSet decodesTo Github.Object.RepositoryConnection -> SelectionSet decodesTo Github.Object.User
pinnedRepositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { affiliations = Absent, after = Absent, before = Absent, first = Absent, isLocked = Absent, last = Absent, orderBy = Absent, ownerAffiliations = Absent, privacy = Absent }

        optionalArgs =
            [ Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeRepositoryOrder, Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Github.Enum.RepositoryPrivacy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pinnedRepositories" optionalArgs object_ identity


type alias ProjectRequiredArguments =
    { number : Int }


{-| Find project by number.

  - number - The project number to find.

-}
project : ProjectRequiredArguments -> SelectionSet decodesTo Github.Object.Project -> SelectionSet (Maybe decodesTo) Github.Object.User
project requiredArgs object_ =
    Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs.number Encode.int ] object_ (identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectOrder
    , search : OptionalArgument String
    , states : OptionalArgument (List Github.Enum.ProjectState.ProjectState)
    }


{-| A list of projects under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.

-}
projects : (ProjectsOptionalArguments -> ProjectsOptionalArguments) -> SelectionSet decodesTo Github.Object.ProjectConnection -> SelectionSet decodesTo Github.Object.User
projects fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent, search = Absent, states = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeProjectOrder, Argument.optional "search" filledInOptionals.search Encode.string, Argument.optional "states" filledInOptionals.states (Encode.enum Github.Enum.ProjectState.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projects" optionalArgs object_ identity


{-| The HTTP path listing user's projects
-}
projectsResourcePath : SelectionSet Github.ScalarCodecs.Uri Github.Object.User
projectsResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing user's projects
-}
projectsUrl : SelectionSet Github.ScalarCodecs.Uri Github.Object.User
projectsUrl =
    Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias PublicKeysOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of public keys associated with this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
publicKeys : (PublicKeysOptionalArguments -> PublicKeysOptionalArguments) -> SelectionSet decodesTo Github.Object.PublicKeyConnection -> SelectionSet decodesTo Github.Object.User
publicKeys fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "publicKeys" optionalArgs object_ identity


type alias PullRequestsOptionalArguments =
    { after : OptionalArgument String
    , baseRefName : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , headRefName : OptionalArgument String
    , labels : OptionalArgument (List String)
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.IssueOrder
    , states : OptionalArgument (List Github.Enum.PullRequestState.PullRequestState)
    }


{-| A list of pull requests associated with this user.

  - after - Returns the elements in the list that come after the specified cursor.
  - baseRefName - The base ref name to filter the pull requests by.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - headRefName - The head ref name to filter the pull requests by.
  - labels - A list of label names to filter the pull requests by.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for pull requests returned from the connection.
  - states - A list of states to filter the pull requests by.

-}
pullRequests : (PullRequestsOptionalArguments -> PullRequestsOptionalArguments) -> SelectionSet decodesTo Github.Object.PullRequestConnection -> SelectionSet decodesTo Github.Object.User
pullRequests fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, baseRefName = Absent, before = Absent, first = Absent, headRefName = Absent, labels = Absent, last = Absent, orderBy = Absent, states = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "baseRefName" filledInOptionals.baseRefName Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "headRefName" filledInOptionals.headRefName Encode.string, Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeIssueOrder, Argument.optional "states" filledInOptionals.states (Encode.enum Github.Enum.PullRequestState.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pullRequests" optionalArgs object_ identity


type alias RegistryPackagesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , name : OptionalArgument String
    , names : OptionalArgument (List (Maybe String))
    , packageType : OptionalArgument Github.Enum.RegistryPackageType.RegistryPackageType
    , publicOnly : OptionalArgument Bool
    , registryPackageType : OptionalArgument String
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| A list of registry packages under the owner.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - name - Find registry package by name.
  - names - Find registry packages by their names.
  - packageType - Filter registry package by type.
  - publicOnly - Filter registry package by whether it is publicly visible
  - registryPackageType - Filter registry package by type (string).
  - repositoryId - Find registry packages in a repository.

-}
registryPackages : (RegistryPackagesOptionalArguments -> RegistryPackagesOptionalArguments) -> SelectionSet decodesTo Github.Object.RegistryPackageConnection -> SelectionSet decodesTo Github.Object.User
registryPackages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, name = Absent, names = Absent, packageType = Absent, publicOnly = Absent, registryPackageType = Absent, repositoryId = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "names" filledInOptionals.names (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "packageType" filledInOptionals.packageType (Encode.enum Github.Enum.RegistryPackageType.toString), Argument.optional "publicOnly" filledInOptionals.publicOnly Encode.bool, Argument.optional "registryPackageType" filledInOptionals.registryPackageType Encode.string, Argument.optional "repositoryId" filledInOptionals.repositoryId (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "registryPackages" optionalArgs object_ identity


type alias RegistryPackagesForQueryOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , packageType : OptionalArgument Github.Enum.RegistryPackageType.RegistryPackageType
    , query : OptionalArgument String
    }


{-| A list of registry packages for a particular search query.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - packageType - Filter registry package by type.
  - query - Find registry package by search query.

-}
registryPackagesForQuery : (RegistryPackagesForQueryOptionalArguments -> RegistryPackagesForQueryOptionalArguments) -> SelectionSet decodesTo Github.Object.RegistryPackageConnection -> SelectionSet decodesTo Github.Object.User
registryPackagesForQuery fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, packageType = Absent, query = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "packageType" filledInOptionals.packageType (Encode.enum Github.Enum.RegistryPackageType.toString), Argument.optional "query" filledInOptionals.query Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "registryPackagesForQuery" optionalArgs object_ identity


type alias RepositoriesOptionalArguments =
    { affiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , isFork : OptionalArgument Bool
    , isLocked : OptionalArgument Bool
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.RepositoryOrder
    , ownerAffiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , privacy : OptionalArgument Github.Enum.RepositoryPrivacy.RepositoryPrivacy
    }


{-| A list of repositories that the user owns.

  - affiliations - Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - isFork - If non-null, filters repositories according to whether they are forks of another repository
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - privacy - If non-null, filters repositories according to privacy

-}
repositories : (RepositoriesOptionalArguments -> RepositoriesOptionalArguments) -> SelectionSet decodesTo Github.Object.RepositoryConnection -> SelectionSet decodesTo Github.Object.User
repositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { affiliations = Absent, after = Absent, before = Absent, first = Absent, isFork = Absent, isLocked = Absent, last = Absent, orderBy = Absent, ownerAffiliations = Absent, privacy = Absent }

        optionalArgs =
            [ Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "isFork" filledInOptionals.isFork Encode.bool, Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeRepositoryOrder, Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Github.Enum.RepositoryPrivacy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "repositories" optionalArgs object_ identity


type alias RepositoriesContributedToOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , contributionTypes : OptionalArgument (List (Maybe Github.Enum.RepositoryContributionType.RepositoryContributionType))
    , first : OptionalArgument Int
    , includeUserRepositories : OptionalArgument Bool
    , isLocked : OptionalArgument Bool
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.RepositoryOrder
    , privacy : OptionalArgument Github.Enum.RepositoryPrivacy.RepositoryPrivacy
    }


{-| A list of repositories that the user recently contributed to.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - contributionTypes - If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
  - first - Returns the first _n_ elements from the list.
  - includeUserRepositories - If true, include user repositories
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection
  - privacy - If non-null, filters repositories according to privacy

-}
repositoriesContributedTo : (RepositoriesContributedToOptionalArguments -> RepositoriesContributedToOptionalArguments) -> SelectionSet decodesTo Github.Object.RepositoryConnection -> SelectionSet decodesTo Github.Object.User
repositoriesContributedTo fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, contributionTypes = Absent, first = Absent, includeUserRepositories = Absent, isLocked = Absent, last = Absent, orderBy = Absent, privacy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "contributionTypes" filledInOptionals.contributionTypes (Encode.enum Github.Enum.RepositoryContributionType.toString |> Encode.maybe |> Encode.list), Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "includeUserRepositories" filledInOptionals.includeUserRepositories Encode.bool, Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeRepositoryOrder, Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Github.Enum.RepositoryPrivacy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "repositoriesContributedTo" optionalArgs object_ identity


type alias RepositoryRequiredArguments =
    { name : String }


{-| Find Repository.

  - name - Name of Repository to find.

-}
repository : RepositoryRequiredArguments -> SelectionSet decodesTo Github.Object.Repository -> SelectionSet (Maybe decodesTo) Github.Object.User
repository requiredArgs object_ =
    Object.selectionForCompositeField "repository" [ Argument.required "name" requiredArgs.name Encode.string ] object_ (identity >> Decode.nullable)


{-| The HTTP path for this user
-}
resourcePath : SelectionSet Github.ScalarCodecs.Uri Github.Object.User
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias SavedRepliesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SavedReplyOrder
    }


{-| Replies this user has saved

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - The field to order saved replies by.

-}
savedReplies : (SavedRepliesOptionalArguments -> SavedRepliesOptionalArguments) -> SelectionSet decodesTo Github.Object.SavedReplyConnection -> SelectionSet (Maybe decodesTo) Github.Object.User
savedReplies fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeSavedReplyOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "savedReplies" optionalArgs object_ (identity >> Decode.nullable)


{-| The GitHub Sponsors listing for this user.
-}
sponsorsListing : SelectionSet decodesTo Github.Object.SponsorsListing -> SelectionSet (Maybe decodesTo) Github.Object.User
sponsorsListing object_ =
    Object.selectionForCompositeField "sponsorsListing" [] object_ (identity >> Decode.nullable)


type alias SponsorshipsAsMaintainerOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , includePrivate : OptionalArgument Bool
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the maintainer.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - includePrivate - Whether or not to include private sponsorships in the result set
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsMaintainer : (SponsorshipsAsMaintainerOptionalArguments -> SponsorshipsAsMaintainerOptionalArguments) -> SelectionSet decodesTo Github.Object.SponsorshipConnection -> SelectionSet decodesTo Github.Object.User
sponsorshipsAsMaintainer fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, includePrivate = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "includePrivate" filledInOptionals.includePrivate Encode.bool, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "sponsorshipsAsMaintainer" optionalArgs object_ identity


type alias SponsorshipsAsSponsorOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the sponsor.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsSponsor : (SponsorshipsAsSponsorOptionalArguments -> SponsorshipsAsSponsorOptionalArguments) -> SelectionSet decodesTo Github.Object.SponsorshipConnection -> SelectionSet decodesTo Github.Object.User
sponsorshipsAsSponsor fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "sponsorshipsAsSponsor" optionalArgs object_ identity


type alias StarredRepositoriesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.StarOrder
    , ownedByViewer : OptionalArgument Bool
    }


{-| Repositories the user has starred.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection
  - ownedByViewer - Filters starred repositories to only return repositories owned by the viewer.

-}
starredRepositories : (StarredRepositoriesOptionalArguments -> StarredRepositoriesOptionalArguments) -> SelectionSet decodesTo Github.Object.StarredRepositoryConnection -> SelectionSet decodesTo Github.Object.User
starredRepositories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent, ownedByViewer = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeStarOrder, Argument.optional "ownedByViewer" filledInOptionals.ownedByViewer Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "starredRepositories" optionalArgs object_ identity


{-| The user's description of what they're currently doing.
-}
status : SelectionSet decodesTo Github.Object.UserStatus -> SelectionSet (Maybe decodesTo) Github.Object.User
status object_ =
    Object.selectionForCompositeField "status" [] object_ (identity >> Decode.nullable)


type alias TopRepositoriesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , since : OptionalArgument Github.ScalarCodecs.DateTime
    }


type alias TopRepositoriesRequiredArguments =
    { orderBy : Github.InputObject.RepositoryOrder }


{-| Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection
  - since - How far back in time to fetch contributed repositories

-}
topRepositories : (TopRepositoriesOptionalArguments -> TopRepositoriesOptionalArguments) -> TopRepositoriesRequiredArguments -> SelectionSet decodesTo Github.Object.RepositoryConnection -> SelectionSet decodesTo Github.Object.User
topRepositories fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, since = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "since" filledInOptionals.since (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "topRepositories" (optionalArgs ++ [ Argument.required "orderBy" requiredArgs.orderBy Github.InputObject.encodeRepositoryOrder ]) object_ identity


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.User
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this user
-}
url : SelectionSet Github.ScalarCodecs.Uri Github.Object.User
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Can the viewer pin repositories and gists to the profile?
-}
viewerCanChangePinnedItems : SelectionSet Bool Github.Object.User
viewerCanChangePinnedItems =
    Object.selectionForField "Bool" "viewerCanChangePinnedItems" [] Decode.bool


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool Github.Object.User
viewerCanCreateProjects =
    Object.selectionForField "Bool" "viewerCanCreateProjects" [] Decode.bool


{-| Whether or not the viewer is able to follow the user.
-}
viewerCanFollow : SelectionSet Bool Github.Object.User
viewerCanFollow =
    Object.selectionForField "Bool" "viewerCanFollow" [] Decode.bool


{-| Whether or not this user is followed by the viewer.
-}
viewerIsFollowing : SelectionSet Bool Github.Object.User
viewerIsFollowing =
    Object.selectionForField "Bool" "viewerIsFollowing" [] Decode.bool


type alias WatchingOptionalArguments =
    { affiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , isLocked : OptionalArgument Bool
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.RepositoryOrder
    , ownerAffiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , privacy : OptionalArgument Github.Enum.RepositoryPrivacy.RepositoryPrivacy
    }


{-| A list of repositories the given user is watching.

  - affiliations - Affiliation options for repositories returned from the connection
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for repositories returned from the connection
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
  - privacy - If non-null, filters repositories according to privacy

-}
watching : (WatchingOptionalArguments -> WatchingOptionalArguments) -> SelectionSet decodesTo Github.Object.RepositoryConnection -> SelectionSet decodesTo Github.Object.User
watching fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { affiliations = Absent, after = Absent, before = Absent, first = Absent, isLocked = Absent, last = Absent, orderBy = Absent, ownerAffiliations = Absent, privacy = Absent }

        optionalArgs =
            [ Argument.optional "affiliations" filledInOptionals.affiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "isLocked" filledInOptionals.isLocked Encode.bool, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeRepositoryOrder, Argument.optional "ownerAffiliations" filledInOptionals.ownerAffiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "privacy" filledInOptionals.privacy (Encode.enum Github.Enum.RepositoryPrivacy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "watching" optionalArgs object_ identity


{-| A URL pointing to the user's public website/blog.
-}
websiteUrl : SelectionSet (Maybe Github.ScalarCodecs.Uri) Github.Object.User
websiteUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "websiteUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)
