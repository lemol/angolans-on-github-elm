-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.SponsorsListing exposing (..)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.SponsorsListing
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The full description of the listing.
-}
fullDescription : SelectionSet String Github.Object.SponsorsListing
fullDescription =
    Object.selectionForField "String" "fullDescription" [] Decode.string


{-| The full description of the listing rendered to HTML.
-}
fullDescriptionHTML : SelectionSet Github.ScalarCodecs.Html Github.Object.SponsorsListing
fullDescriptionHTML =
    Object.selectionForField "ScalarCodecs.Html" "fullDescriptionHTML" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| -}
id : SelectionSet Github.ScalarCodecs.Id Github.Object.SponsorsListing
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The listing's full name.
-}
name : SelectionSet String Github.Object.SponsorsListing
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The short description of the listing.
-}
shortDescription : SelectionSet String Github.Object.SponsorsListing
shortDescription =
    Object.selectionForField "String" "shortDescription" [] Decode.string


{-| The short name of the listing.
-}
slug : SelectionSet String Github.Object.SponsorsListing
slug =
    Object.selectionForField "String" "slug" [] Decode.string


type alias TiersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorsTierOrder
    }


{-| The published tiers for this GitHub Sponsors listing.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for Sponsors tiers returned from the connection.

-}
tiers : (TiersOptionalArguments -> TiersOptionalArguments) -> SelectionSet decodesTo Github.Object.SponsorsTierConnection -> SelectionSet (Maybe decodesTo) Github.Object.SponsorsListing
tiers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.encodeSponsorsTierOrder ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "tiers" optionalArgs object_ (identity >> Decode.nullable)
